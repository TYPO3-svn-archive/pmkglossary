a:2:{s:4:"meta";a:3:{s:5:"title";s:12:"PMK Glossary";s:5:"descr";s:275:"Multilanguage autoparse glossary.

Parses the output HTML and automatically inserts glossary definitions.
Glossary links opens up a AJAX-based tooltipbox showing the definition.

Supports multiple languages.

Also includes FE plugin for displaying the entire glossary.";s:7:"options";a:2:{s:10:"usageCount";N;s:19:"includeCodeAbstract";N;}}s:5:"files";a:5:{s:14:"MD5_90958d130c";a:4:{s:8:"filename";s:20:"class.ext_update.php";s:8:"filesize";i:6816;s:6:"header";a:5:{s:4:"text";s:73:"

Class for updating/converting mr_glossary data into pmkglossary format
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:38:"@author	 Peter Klein <peter@umloud.dk>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:29:"Peter Klein <peter@umloud.dk>";}}}s:3:"DAT";a:7:{i:1;a:8:{s:6:"header";s:18:"class ext_update {";s:5:"class";i:1;s:11:"parentClass";s:10:"ext_update";s:4:"cDat";a:5:{s:4:"text";s:73:"

Class for updating/converting mr_glossary data into pmkglossary format
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:1:{i:0;s:38:"@author	 Peter Klein <peter@umloud.dk>";}s:11:"other_index";a:1:{s:7:"@author";a:1:{i:0;s:29:"Peter Klein <peter@umloud.dk>";}}}s:7:"content";s:0:"";s:12:"content_size";i:2;s:13:"content_lines";i:1;s:6:"atLine";i:46;}i:3;a:7:{s:6:"header";s:17:"function main()	{";s:11:"parentClass";s:10:"ext_update";s:4:"cDat";a:3:{s:4:"text";s:58:"

Main function, returning the HTML content of the module
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:4:"HTML";}}s:7:"content";s:0:"";s:12:"content_size";i:1183;s:13:"content_lines";i:38;s:6:"atLine";i:53;}i:5;a:7:{s:6:"header";s:32:"function convertData($options) {";s:11:"parentClass";s:10:"ext_update";s:4:"cDat";a:3:{s:4:"text";s:49:"

Convert mrglossary data to PMK Glossary format
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:80:"$options: What to do with record after converting. (0=Nothing, 1=Hide, 2=Delete)";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:930;s:13:"content_lines";i:26;s:6:"atLine";i:98;}i:7;a:7:{s:6:"header";s:60:"function convertOverlay($parentRow,$newParentUid,$options) {";s:11:"parentClass";s:10:"ext_update";s:4:"cDat";a:3:{s:4:"text";s:57:"

Convert mrglossary overlay data to PMK Glossary format
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"array";i:1;s:33:"$parentRow: Data from main record";}i:1;a:2:{i:0;s:7:"integer";i:1;s:35:"$newParentUid: Id for parent record";}i:2;a:2:{i:0;s:7:"integer";i:1;s:80:"$options: What to do with record after converting. (0=Nothing, 1=Hide, 2=Delete)";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:882;s:13:"content_lines";i:24;s:6:"atLine";i:133;}i:9;a:7:{s:6:"header";s:29:"function createRecord($row) {";s:11:"parentClass";s:10:"ext_update";s:4:"cDat";a:3:{s:4:"text";s:45:"

Save converted data in PMK Glossary format
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:24:"$row: Data to save in DB";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:570;s:13:"content_lines";i:18;s:6:"atLine";i:164;}i:11;a:4:{s:6:"header";s:31:"function wordcharsOnly($text) {";s:11:"parentClass";s:10:"ext_update";s:4:"cDat";a:3:{s:4:"text";s:131:"

Removes any non-word characters from string and converts to uppercase
If result is empty string then original string is returned
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:45:"$text: Text with possible non-word characters";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"Text stripped of non-word characters";}}s:6:"atLine";i:190;}i:13;a:7:{s:6:"header";s:19:"function access() {";s:11:"parentClass";s:10:"ext_update";s:4:"cDat";a:3:{s:4:"text";s:27:"

access is always allowed
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:19:"Always returns true";}}s:7:"content";s:0:"";s:12:"content_size";i:257;s:13:"content_lines";i:11;s:6:"atLine";i:201;}}}s:14:"MD5_22d76af06e";a:4:{s:8:"filename";s:34:"class.tx_pmkglossary_extraeval.php";s:8:"filesize";i:4475;s:6:"header";a:5:{s:4:"text";s:53:"

'Custom TCA eval' for the 'pmkglossary' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:31:"@author Peter Klein <pmk@io.dk>";i:1;s:14:"@package TYPO3";i:2;s:26:"@subpackage tx_pmkglossary";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:23:"Peter Klein <pmk@io.dk>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:15:"tx_pmkglossary ";}}}s:3:"DAT";a:4:{i:1;a:8:{s:6:"header";s:32:"class tx_pmkglossary_extraeval {";s:5:"class";i:1;s:11:"parentClass";s:24:"tx_pmkglossary_extraeval";s:4:"cDat";a:5:{s:4:"text";s:53:"

'Custom TCA eval' for the 'pmkglossary' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:31:"@author Peter Klein <pmk@io.dk>";i:1;s:14:"@package TYPO3";i:2;s:26:"@subpackage tx_pmkglossary";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:23:"Peter Klein <pmk@io.dk>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:15:"tx_pmkglossary ";}}}s:7:"content";s:0:"";s:12:"content_size";i:2;s:13:"content_lines";i:1;s:6:"atLine";i:47;}i:3;a:7:{s:6:"header";s:52:"function evaluateFieldValue($value, $is_in, &$set) {";s:11:"parentClass";s:24:"tx_pmkglossary_extraeval";s:4:"cDat";a:3:{s:4:"text";s:40:"

Checks if catchword is unique in pid.
";s:5:"param";a:3:{i:0;a:2:{i:0;s:5:"mixed";i:1;s:41:"$value: The value that has to be checked.";}i:1;a:2:{i:0;s:6:"string";i:1;s:20:"$is_in: Is-In String";}i:2;a:2:{i:0;s:7:"integer";i:1;s:86:"$set: Determines if the field can be set (value correct) or not (PASSED BY REFERENCE!)";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:34:"$value: The new value of the field";}}s:7:"content";s:0:"";s:12:"content_size";i:1090;s:13:"content_lines";i:35;s:6:"atLine";i:57;}i:5;a:4:{s:6:"header";s:23:"function getPid($uid) {";s:11:"parentClass";s:24:"tx_pmkglossary_extraeval";s:4:"cDat";a:3:{s:4:"text";s:31:"

Get Page Id (PID) of record.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:7:"integer";i:1;s:19:"$uid: Id of record.";}}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:34:"$row['pid']: Id of storage folder.";}}s:6:"atLine";i:99;}i:7;a:7:{s:6:"header";s:31:"function checkForDupe($value) {";s:11:"parentClass";s:24:"tx_pmkglossary_extraeval";s:4:"cDat";a:3:{s:4:"text";s:123:"

Check if there already exists a record with the same title.
Or if the title is present in the altitle of another record.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:41:"$value: The value that has to be checked.";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:32:"true if duplicate title is found";}}s:7:"content";s:0:"";s:12:"content_size";i:756;s:13:"content_lines";i:16;s:6:"atLine";i:112;}}}s:14:"MD5_264f04dcdd";a:4:{s:8:"filename";s:34:"class.tx_pmkglossary_wordtitle.php";s:8:"filesize";i:3269;s:6:"header";a:5:{s:4:"text";s:55:"

'TCA preprocessing' for the 'pmkglossary' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:31:"@author Peter Klein <pmk@io.dk>";i:1;s:14:"@package TYPO3";i:2;s:26:"@subpackage tx_pmkglossary";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:23:"Peter Klein <pmk@io.dk>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:15:"tx_pmkglossary ";}}}s:3:"DAT";a:3:{i:1;a:8:{s:6:"header";s:32:"class tx_pmkglossary_wordtitle {";s:5:"class";i:1;s:11:"parentClass";s:24:"tx_pmkglossary_wordtitle";s:4:"cDat";a:5:{s:4:"text";s:55:"

'TCA preprocessing' for the 'pmkglossary' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:31:"@author Peter Klein <pmk@io.dk>";i:1;s:14:"@package TYPO3";i:2;s:26:"@subpackage tx_pmkglossary";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:23:"Peter Klein <pmk@io.dk>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:15:"tx_pmkglossary ";}}}s:7:"content";s:0:"";s:12:"content_size";i:2;s:13:"content_lines";i:1;s:6:"atLine";i:46;}i:3;a:4:{s:6:"header";s:98:"function processDatamap_afterDatabaseOperations($status, $table, $id, &$fieldArray, &$reference) {";s:11:"parentClass";s:24:"tx_pmkglossary_wordtitle";s:4:"cDat";a:3:{s:4:"text";s:57:"

Main function. Hook from t3lib/class.t3lib_tcemain.php
";s:5:"param";a:5:{i:0;a:2:{i:0;s:6:"string";i:1;s:58:"$status: Status of the current operation, 'new' or 'update";}i:1;a:2:{i:0;s:6:"string";i:1;s:47:"$table: The table currently processing data for";}i:2;a:2:{i:0;s:6:"string";i:1;s:88:"$id: The record uid currently processing data for, [integer] or [string] (like 'NEW...')";}i:3;a:2:{i:0;s:5:"array";i:1;s:40:"$fieldArray: The field array of a record";}i:4;a:2:{i:0;s:6:"object";i:1;s:38:"$reference: reference to parent object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:6:"atLine";i:58;}i:5;a:7:{s:6:"header";s:31:"function wordcharsOnly($text) {";s:11:"parentClass";s:24:"tx_pmkglossary_wordtitle";s:4:"cDat";a:3:{s:4:"text";s:131:"

Removes any non-word characters from string and converts to uppercase
If result is empty string then original string is returned
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:45:"$text: Text with possible non-word characters";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"Text stripped of non-word characters";}}s:7:"content";s:0:"";s:12:"content_size";i:427;s:13:"content_lines";i:9;s:6:"atLine";i:73;}}}s:14:"MD5_03f8e20dc4";a:4:{s:8:"filename";s:32:"pi1/class.tx_pmkglossary_pi1.php";s:8:"filesize";i:8915;s:6:"header";a:5:{s:4:"text";s:57:"

Plugin 'PMK Glossary' for the 'pmkglossary' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:31:"@author Peter Klein <pmk@io.dk>";i:1;s:14:"@package TYPO3";i:2;s:26:"@subpackage tx_pmkglossary";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:23:"Peter Klein <pmk@io.dk>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:15:"tx_pmkglossary ";}}}s:3:"DAT";a:7:{i:1;a:8:{s:6:"header";s:47:"class tx_pmkglossary_pi1 extends tslib_pibase {";s:5:"class";i:1;s:11:"parentClass";s:18:"tx_pmkglossary_pi1";s:4:"cDat";a:5:{s:4:"text";s:57:"

Plugin 'PMK Glossary' for the 'pmkglossary' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:31:"@author Peter Klein <pmk@io.dk>";i:1;s:14:"@package TYPO3";i:2;s:26:"@subpackage tx_pmkglossary";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:23:"Peter Klein <pmk@io.dk>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:15:"tx_pmkglossary ";}}}s:7:"content";s:0:"";s:12:"content_size";i:262;s:13:"content_lines";i:6;s:6:"atLine";i:50;}i:3;a:7:{s:6:"header";s:32:"function main($content, $conf) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi1";s:4:"cDat";a:3:{s:4:"text";s:32:"

The main method of the PlugIn
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:28:"$content: The PlugIn content";}i:1;a:2:{i:0;s:5:"array";i:1;s:31:"$conf: The PlugIn configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:44:"The	content that is displayed on the website";}}s:7:"content";s:0:"";s:12:"content_size";i:551;s:13:"content_lines";i:17;s:6:"atLine";i:64;}i:5;a:7:{s:6:"header";s:24:"function getGlossary() {";s:11:"parentClass";s:18:"tx_pmkglossary_pi1";s:4:"cDat";a:3:{s:4:"text";s:31:"

Get glossary records from DB
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:49:"Complete array of glossary records (alpha sorted)";}}s:7:"content";s:0:"";s:12:"content_size";i:1460;s:13:"content_lines";i:32;s:6:"atLine";i:87;}i:7;a:7:{s:6:"header";s:37:"function displayGlossary($glossary) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi1";s:4:"cDat";a:3:{s:4:"text";s:26:"

Creates Glossary output
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:27:"$glossary: Glossary records";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:44:"The	content that is displayed on the website";}}s:7:"content";s:0:"";s:12:"content_size";i:2403;s:13:"content_lines";i:48;s:6:"atLine";i:126;}i:9;a:7:{s:6:"header";s:56:"function setMarkers(array $row,$markerArray = array()) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi1";s:4:"cDat";a:3:{s:4:"text";s:37:"

Sets markers for HTML substitution
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:28:"$row: Data to add to markers";}i:1;a:2:{i:0;s:5:"array";i:1;s:44:"$markerArray: optional existing $markerArray";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:12:"$markerArray";}}s:7:"content";s:0:"";s:12:"content_size";i:553;s:13:"content_lines";i:14;s:6:"atLine";i:182;}i:11;a:4:{s:6:"header";s:29:"function _alpha_sort($a,$b) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi1";s:4:"cDat";a:3:{s:4:"text";s:38:"

Calback function for custom sorting
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:16:"$a: First string";}i:1;a:2:{i:0;s:6:"string";i:1;s:16:"$b: First string";}}s:6:"return";a:2:{i:0;s:7:"integer";i:1;s:90:"Returns -1 if $a  is less than $b ; 1 if $a  is greater than $b , and 0 if they are equal.";}}s:6:"atLine";i:204;}i:13;a:7:{s:6:"header";s:31:"function wordcharsOnly($text) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi1";s:4:"cDat";a:3:{s:4:"text";s:131:"

Removes any non-word characters from string and converts to uppercase
If result is empty string then original string is returned
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:45:"$text: Text with possible non-word characters";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:36:"Text stripped of non-word characters";}}s:7:"content";s:0:"";s:12:"content_size";i:434;s:13:"content_lines";i:12;s:6:"atLine";i:217;}}}s:14:"MD5_bbe9a952f2";a:4:{s:8:"filename";s:32:"pi2/class.tx_pmkglossary_pi2.php";s:8:"filesize";i:13729;s:6:"header";a:5:{s:4:"text";s:57:"

Plugin 'PMK Glossary' for the 'pmkglossary' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:31:"@author Peter Klein <pmk@io.dk>";i:1;s:14:"@package TYPO3";i:2;s:26:"@subpackage tx_pmkglossary";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:23:"Peter Klein <pmk@io.dk>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:15:"tx_pmkglossary ";}}}s:3:"DAT";a:14:{i:1;a:8:{s:6:"header";s:47:"class tx_pmkglossary_pi2 extends tslib_pibase {";s:5:"class";i:1;s:11:"parentClass";s:18:"tx_pmkglossary_pi2";s:4:"cDat";a:5:{s:4:"text";s:57:"

Plugin 'PMK Glossary' for the 'pmkglossary' extension.
";s:5:"param";a:0:{}s:6:"return";a:2:{i:0;s:6:"[type]";i:1;s:3:"...";}s:5:"other";a:3:{i:0;s:31:"@author Peter Klein <pmk@io.dk>";i:1;s:14:"@package TYPO3";i:2;s:26:"@subpackage tx_pmkglossary";}s:11:"other_index";a:3:{s:7:"@author";a:1:{i:0;s:23:"Peter Klein <pmk@io.dk>";}s:8:"@package";a:1:{i:0;s:6:"TYPO3 ";}s:11:"@subpackage";a:1:{i:0;s:15:"tx_pmkglossary ";}}}s:7:"content";s:0:"";s:12:"content_size";i:463;s:13:"content_lines";i:9;s:6:"atLine";i:60;}i:3;a:7:{s:6:"header";s:32:"function main($content, $conf) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi2";s:4:"cDat";a:3:{s:4:"text";s:32:"

The main method of the PlugIn
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"string";i:1;s:58:"$content: The content that should be parsed for catchwords";}i:1;a:2:{i:0;s:5:"array";i:1;s:31:"$conf: The PlugIn configuration";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:44:"The content that is displayed on the website";}}s:7:"content";s:0:"";s:12:"content_size";i:879;s:13:"content_lines";i:30;s:6:"atLine";i:77;}i:5;a:7:{s:6:"header";s:39:"function processDom(DOMDocument $dom) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi2";s:4:"cDat";a:3:{s:4:"text";s:55:"

process DOMDocument object and insert glossary tags.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:27:"$domObj: DOMDocument Object";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:172;s:13:"content_lines";i:4;s:6:"atLine";i:114;}i:7;a:7:{s:6:"header";s:40:"function listAllElements(DOMNode $dom) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi2";s:4:"cDat";a:3:{s:4:"text";s:51:"

process Convert DOMDocument into array of nodes.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:23:"$domObj: DOMnode Object";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:32:"$total_nodes: Array of DOM nodes";}}s:7:"content";s:0:"";s:12:"content_size";i:345;s:13:"content_lines";i:13;s:6:"atLine";i:125;}i:9;a:7:{s:6:"header";s:35:"function getParents(DOMNode $dom) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi2";s:4:"cDat";a:3:{s:4:"text";s:32:"

get parent nodes for element.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:23:"$domObj: DOMnode Object";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:22:"$parents: parent nodes";}}s:7:"content";s:0:"";s:12:"content_size";i:215;s:13:"content_lines";i:9;s:6:"atLine";i:145;}i:11;a:7:{s:6:"header";s:55:"function hasTagNames(DOMNode $node, array $tag_names) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi2";s:4:"cDat";a:3:{s:4:"text";s:43:"

Test if node tag is in list of tagnames.
";s:5:"param";a:2:{i:0;a:2:{i:0;s:6:"object";i:1;s:21:"$node: DOMnode Object";}i:1;a:2:{i:0;s:5:"array";i:1;s:21:"$tag_names: tag names";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:114;s:13:"content_lines";i:4;s:6:"atLine";i:162;}i:13;a:7:{s:6:"header";s:31:"function hasClassName($nodes) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi2";s:4:"cDat";a:3:{s:4:"text";s:65:"

Test if class name for "no parse" has been set on parent nodes
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:23:"$nodes: DOMnodes Object";}}s:6:"return";a:2:{i:0;s:7:"boolean";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:295;s:13:"content_lines";i:15;s:6:"atLine";i:173;}i:15;a:7:{s:6:"header";s:34:"function glossary(DOMNode $node) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi2";s:4:"cDat";a:3:{s:4:"text";s:62:"

Parse DOMDocument and replace catchwords with glossary info
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:16:"$node: DOM array";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:2269;s:13:"content_lines";i:66;s:6:"atLine";i:195;}i:17;a:7:{s:6:"header";s:22:"function init($conf) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi2";s:4:"cDat";a:3:{s:4:"text";s:32:"

Initialize Plugin config vars
";s:5:"param";a:1:{i:0;a:2:{i:0;s:5:"array";i:1;s:31:"$conf: The PlugIn configuration";}}s:6:"return";a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:7:"content";s:0:"";s:12:"content_size";i:831;s:13:"content_lines";i:12;s:6:"atLine";i:268;}i:19;a:7:{s:6:"header";s:34:"function makeRegExMatch($string) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi2";s:4:"cDat";a:3:{s:4:"text";s:40:"

Creates RexEx ready comparison string
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:23:"String/word to look for";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:29:"RexEx ready comparison string";}}s:7:"content";s:0:"";s:12:"content_size";i:132;s:13:"content_lines";i:4;s:6:"atLine";i:287;}i:21;a:7:{s:6:"header";s:24:"function getGlossary() {";s:11:"parentClass";s:18:"tx_pmkglossary_pi2";s:4:"cDat";a:3:{s:4:"text";s:63:"

Get glossary records from DB, and creates preg_replace array
";s:5:"param";a:1:{i:0;a:2:{i:0;s:4:"void";i:1;s:0:"";}}s:6:"return";a:2:{i:0;s:5:"array";i:1;s:68:"Complete array of glossary records (sorted by length. longest first)";}}s:7:"content";s:0:"";s:12:"content_size";i:2113;s:13:"content_lines";i:50;s:6:"atLine";i:298;}i:23;a:7:{s:6:"header";s:29:"function HTML2DOM($content) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi2";s:4:"cDat";a:3:{s:4:"text";s:185:"

Convert HTML string data into DOM object

NOTE: Internal DOM format is ALWAYS UTF-8, regardless of the value of
      $this->toCS. Value of $this->toCS is ONLY used when saving data.
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"string";i:1;s:37:"$content: HTML content in text format";}}s:6:"return";a:2:{i:0;s:6:"object";i:1;s:19:"$domObj: DOM Object";}}s:7:"content";s:0:"";s:12:"content_size";i:520;s:13:"content_lines";i:11;s:6:"atLine";i:358;}i:25;a:4:{s:6:"header";s:40:"function DOM2HTML(DOMDocument $domObj) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi2";s:4:"cDat";a:3:{s:4:"text";s:43:"

Convert DOM object into HTML string data
";s:5:"param";a:1:{i:0;a:2:{i:0;s:6:"object";i:1;s:27:"$domObj: DOMDocument Object";}}s:6:"return";a:2:{i:0;s:6:"string";i:1;s:37:"$content: HTML content in text format";}}s:6:"atLine";i:376;}i:27;a:7:{s:6:"header";s:28:"function _len_sort($a, $b) {";s:11:"parentClass";s:18:"tx_pmkglossary_pi2";s:4:"cDat";a:3:{s:4:"text";s:35:"

Custom sorting callback function
";s:5:"param";a:2:{i:0;a:2:{i:0;s:5:"array";i:1;s:19:"$a: Glossary record";}i:1;a:2:{i:0;s:5:"array";i:1;s:19:"$b: glossary record";}}s:6:"return";a:2:{i:0;s:5:"mixed";i:1;s:9:"-1,0 or 1";}}s:7:"content";s:0:"";s:12:"content_size";i:440;s:13:"content_lines";i:15;s:6:"atLine";i:390;}}}}}